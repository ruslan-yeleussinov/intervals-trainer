console.log("// STARTING POINT\n\n");

// INTERVALS
const intervalsArr = ["–ß–ò–°–¢–£–Æ –ü–†–ò–ú–£", "–ú–ê–õ–£–Æ –°–ï–ö–£–ù–î–£", "–ë–û–õ–¨–®–£–Æ –°–ï–ö–£–ù–î–£", "–£–í–ï–õ–ò–ß–ï–ù–ù–£–Æ –°–ï–ö–£–ù–î–£", "–ú–ê–õ–£–Æ –¢–ï–†–¶–ò–Æ", "–ë–û–õ–¨–®–£–Æ –¢–ï–†–¶–ò–Æ", "–ß–ò–°–¢–£–Æ –ö–í–ê–†–¢–£", "–£–í–ï–õ–ò–ß–ï–ù–ù–£–Æ –ö–í–ê–†–¢–£", "–£–ú–ï–ù–¨–®–Å–ù–ù–£–Æ –ö–í–ò–ù–¢–£", "–ß–ò–°–¢–£–Æ –ö–í–ò–ù–¢–£", "–ú–ê–õ–£–Æ –°–ï–ö–°–¢–£", "–ë–û–õ–¨–®–£–Æ –°–ï–ö–°–¢–£", "–£–ú–ï–ù–¨–®–Å–ù–ù–£–Æ –°–ï–ü–¢–ò–ú–£", "–ú–ê–õ–£–Æ –°–ï–ü–¢–ò–ú–£", "–ë–û–õ–¨–®–£–Æ –°–ï–ü–¢–ò–ú–£", "–ß–ò–°–¢–£–Æ –û–ö–¢–ê–í–£"];

// get selected notes from local storage
const storedIntervals = localStorage.getItem("selectedIntervals");
const selectedIntervalsArr = storedIntervals ? JSON.parse(storedIntervals) : [];

const randomIntervalIndex = Math.floor(Math.random() * selectedIntervalsArr.length);
// random interval
const randomInterval = selectedIntervalsArr[randomIntervalIndex];
console.log("random interval:", randomInterval);
// determine the indexes of the selected intervals in the intervalsArr
const selectedIndexes = selectedIntervalsArr.map(interval => intervalsArr.indexOf(interval));

// SHORT INTERVALS
const intervalsArrShort = ["—á1", "–º2", "–±2", "—É–≤2", "–º3", "–±3", "—á4", "—É–≤4", "—É–º5", "—á5", "–º6", "–±6", "—É–º7", "–º7", "–±7", "—á8"];
// find selected short intervals
const selectedShortIntervals = selectedIndexes.map(index => intervalsArrShort[index]);
// random short interval
const randomShortInterval = selectedShortIntervals[randomIntervalIndex];
console.log("random short interval:", randomShortInterval);

// DIRECTIONS
const directionsArr = ["–≤–≤–µ—Ä—Ö", "–≤–Ω–∏–∑"];

// get selected directions from local storage
const storedDirections = localStorage.getItem("selectedDirections");
const selectedDirectionsArr = storedDirections ? JSON.parse(storedDirections) : [];

const randomDirectionIndex = Math.floor(Math.random() * selectedDirectionsArr.length);
// random direction
const randomDirection = selectedDirectionsArr[randomDirectionIndex];
console.log("random direction:", randomDirection);
// root is defined if the direction is "–≤–≤–µ—Ä—Ö" (rootIsDefined) and top is defined if the direction is "–≤–Ω–∏–∑" (!rootIsDefined)
const rootIsDefined = randomDirection === "–≤–≤–µ—Ä—Ö" ? true : false;

// NOTES
const notesArr = ["–î–û‚ô≠", "–î–û", "–î–û‚ôØ", "–†–ï‚ô≠", "–†–ï", "–†–ï‚ôØ", "–ú–ò‚ô≠", "–ú–ò", "–§–ê‚ô≠", "–ú–ò‚ôØ", "–§–ê", "–§–ê‚ôØ", "–°–û–õ–¨‚ô≠", "–°–û–õ–¨", "–°–û–õ–¨‚ôØ", "–õ–Ø‚ô≠", "–õ–Ø", "–õ–Ø‚ôØ", "–°–ò‚ô≠", "–°–ò", "–°–ò‚ôØ"];

// get selected notes from local storage
const storedNotes = localStorage.getItem("selectedNotes");
const selectedNotesArr = storedNotes ? JSON.parse(storedNotes) : [];

const randomNoteIndex = Math.floor(Math.random() * selectedNotesArr.length);
// random note
const randomNote = selectedNotesArr[randomNoteIndex];
console.log("random note:", randomNote);

// GENERATE HTML
const container = document.getElementById("container");
const htmlTemplate = `
  <!-- TASK SECTION -->
  <div id="task">
    <div id="build">–ü–æ—Å—Ç—Ä–æ–π—Ç–µ</div>
    <div id="random-interval">${randomInterval}</div>
    
    <div id="random-direction-and-note"><span id="random-direction">${randomDirection}</span> –æ—Ç –Ω–æ—Ç—ã <span id="random-note">${randomNote}</span></div>
  </div>

  <!-- DISPLAY SECTION --> 
  <div id="root-interval-top">
    <div id="root">${rootIsDefined ? randomNote : "?"}</div>
    <div id="interval">${randomShortInterval}</div>
    <div id="top">${!rootIsDefined ? randomNote : "?"}</div>
  </div>
`;
container.innerHTML = htmlTemplate;

// RELOAD PAGE IF THE GENERATED TASK IS TOO DIFFICULT
if (rootIsDefined && randomNote === "–î–û‚ô≠" && randomInterval === "–£–ú–ï–ù–¨–®–Å–ù–ù–£–Æ –°–ï–ü–¢–ò–ú–£") {
  window.location.reload();
} else if (rootIsDefined && randomNote === "–§–ê‚ô≠" && randomInterval === "–£–ú–ï–ù–¨–®–Å–ù–ù–£–Æ –°–ï–ü–¢–ò–ú–£") {
  window.location.reload();
} else if (!rootIsDefined && randomNote === "–ú–ò‚ôØ" && randomInterval === "–£–ú–ï–ù–¨–®–Å–ù–ù–£–Æ –°–ï–ü–¢–ò–ú–£") {
  window.location.reload();
} else if (!rootIsDefined && randomNote === "–°–ò‚ôØ" && randomInterval === "–£–ú–ï–ù–¨–®–Å–ù–ù–£–Æ –°–ï–ü–¢–ò–ú–£") {
  window.location.reload();
} else if (!rootIsDefined && randomNote === "–î–û‚ô≠" && randomInterval === "–£–í–ï–õ–ò–ß–ï–ù–ù–£–Æ –°–ï–ö–£–ù–î–£") {
  window.location.reload();
} else if (!rootIsDefined && randomNote === "–§–ê‚ô≠" && randomInterval === "–£–í–ï–õ–ò–ß–ï–ù–ù–£–Æ –°–ï–ö–£–ù–î–£") {
  window.location.reload();
} else if (rootIsDefined && randomNote === "–ú–ò‚ôØ" && randomInterval === "–£–í–ï–õ–ò–ß–ï–ù–ù–£–Æ –°–ï–ö–£–ù–î–£") {
  window.location.reload();
} else if (rootIsDefined && randomNote === "–°–ò‚ôØ" && randomInterval === "–£–í–ï–õ–ò–ß–ï–ù–ù–£–Æ –°–ï–ö–£–ù–î–£") {
  window.location.reload();
}

// BLINKING BUTTONS  

// blink note buttons if accidental is selected before the note
function blinkNotes() {
  const noteButtons = document.querySelectorAll('.note-btn');
  noteButtons.forEach(button => {
      button.classList.add('blinking');
      // Remove the class after the animation is complete
      button.addEventListener('animationend', () => {
        button.classList.remove('blinking');
      }, { once: true });
  });
}

// blink note and accidental buttons if check answer button is clicked before the note is selected
function blinkNotesAndAccidentals() {
  const noteButtons = document.querySelectorAll('.note-accidental-btn');
  noteButtons.forEach(button => {
      button.classList.add('blinking');
      // Remove the class after the animation is complete
      button.addEventListener('animationend', () => {
          button.classList.remove('blinking');
      }, { once: true });
  });
}

// SELECT NOTE AND ACCIDENTAL
console.log("\n// CALCULATE RIGHT ANSWER\n\n");

// determine the workspace
const rootNote = document.querySelector('#root');
const topNote = document.querySelector('#top');
let workSpace = rootIsDefined ? topNote : rootNote;
console.log("workspace:", workSpace === rootNote ? "root" : "top");

// SELECT NOTE
const naturalNotesArr = ["–î–û", "–†–ï", "–ú–ò", "–§–ê", "–°–û–õ–¨", "–õ–Ø", "–°–ò"];

// to find the index of the selected note in the naturalNotesArr
let selectedNote = "";
let selectedNoteIndex = "";

const selectNoteDiv = document.getElementById('select-note');
const selectNoteSound = new Audio("sounds/select-note-sound.mp3");
selectNoteDiv.addEventListener('click', (event) => {
  if (event.target.tagName === 'BUTTON') {
    selectedNote = event.target.innerHTML;
    selectedNoteIndex = naturalNotesArr.indexOf(selectedNote);
    selectNoteSound.play();
  }
  workSpace.innerHTML = selectedNote;
  console.log("\n// SELECT NOTE AND ACCIDENTAL\n\n");
  console.log("selected note:", selectedNote);
});

// SELECT ACCIDENTAL
const accidentalsArr = ["‚ô≠", "ùÑ´", "‚ôØ", "ùÑ™"];

const alteredNotesArr = [["–î–û‚ô≠", "–î–ûùÑ´", "–î–û‚ôØ", "–î–ûùÑ™"], ["–†–ï‚ô≠", "–†–ïùÑ´", "–†–ï‚ôØ", "–†–ïùÑ™"], ["–ú–ò‚ô≠", "–ú–òùÑ´", "–ú–ò‚ôØ", "–ú–òùÑ™"], ["–§–ê‚ô≠", "–§–êùÑ´", "–§–ê‚ôØ", "–§–êùÑ™"], ["–°–û–õ–¨‚ô≠", "–°–û–õ–¨ùÑ´", "–°–û–õ–¨‚ôØ", "–°–û–õ–¨ùÑ™"], ["–õ–Ø‚ô≠", "–õ–ØùÑ´", "–õ–Ø‚ôØ", "–õ–ØùÑ™"], ["–°–ò‚ô≠", "–°–òùÑ´", "–°–ò‚ôØ", "–°–òùÑ™"]];

// to find the index of the selected accidental in the accidentalsArr
let selectedAccidental = "";
let selectedAccidentalIndex = "";

const selectAccidentalDiv = document.getElementById('select-accidental');
selectAccidentalDiv.addEventListener('click', (event) => {
  if (event.target.tagName === 'BUTTON') {
    selectedAccidental = event.target.innerHTML;
    selectedAccidentalIndex = accidentalsArr.indexOf(selectedAccidental);
    if (workSpace.innerHTML === "?") {
      blinkNotes();
      selectedNote = "?";
    } else {
      selectedNote = alteredNotesArr[selectedNoteIndex][selectedAccidentalIndex];
      selectNoteSound.play();
    }
  }
  workSpace.innerHTML = selectedNote;
  console.log("selected note with accidental:", selectedNote);
});

// DETERMINE THE CORRECT NOTE

// determine the number of steps extracting the number from the given short name of the interval
const splittedInterval = randomShortInterval.split("");
const numberOfSteps = Number(splittedInterval[splittedInterval.length - 1]);

// determine the second note name extracting only the note name from the given note, removing the accidental sign
// const splittedNote = randomNote.split("");
const cleanedNote = randomNote.replace(/[‚ôØ‚ô≠ùÑ™ùÑ´]/g, "");
console.log("cleaned note (without accidental):", cleanedNote);

let secondNoteName = "";

// determine the top note if the root note is given
function rootToTop(cleanedNote, count) {
  // Let's find the index of the starting note
  const rootStepIndex = naturalNotesArr.indexOf(cleanedNote);

  if (rootStepIndex === -1) {
    console.error("The specified starting note was not found.");
    return;
  }

  // Determine the index of the top note considering cyclicity
  const lastIndex = (rootStepIndex + count - 1) % naturalNotesArr.length;
  const topStep = naturalNotesArr[lastIndex];
  console.log("root step:", cleanedNote);
  console.log("top step:", topStep);

  secondNoteName = topStep;
}

// determine the root note if the top note is given
function topToRoot(cleanedNote, count) {
  // Let's find the index of the starting note
  const topStepIndex = naturalNotesArr.indexOf(cleanedNote);

  if (topStepIndex === -1) {
    console.error("The specified starting note was not found.");
    return;
  }

  // Determine the index of the root note considering cyclicity.
  const rootNoteIndex = (topStepIndex - (count - 1) + naturalNotesArr.length) % naturalNotesArr.length;
  const rootStep = naturalNotesArr[rootNoteIndex];
  
  console.log("top step:", cleanedNote);
  console.log("root step:", rootStep);

  secondNoteName = rootStep;
}

// use the correct function depending on the direction
rootIsDefined ? rootToTop(cleanedNote, numberOfSteps) : topToRoot(cleanedNote, numberOfSteps); 

console.log("second note name:", secondNoteName);

// DETERMINE NUMBER OF SEMITONES

// Define the number of semitones for each interval
const semitonesObj = {
  "—á1": 0,
  "–º2": 1,
  "–±2": 2,
  "—É–≤2": 3,
  "–º3": 3,
  "–±3": 4,
  "—á4": 5,
  "—É–≤4": 6,
  "—É–º5": 6,
  "—á5": 7,
  "–º6": 8,
  "–±6": 9,
  "—É–º7": 9,
  "–º7": 10,
  "–±7": 11,
  "—á8": 12
}

// Determine the current number of semitones
const currentNumberOfSemitones = semitonesObj[randomShortInterval];
console.log("current number of semitones: ", currentNumberOfSemitones);

// Determine the key number (which of the 12) 
const twelveKeysObj = {
  "–°–ò‚ôØ": 1,
  "–î–û": 1,
  "–†–ïùÑ´": 1,
  "–°–òùÑ™": 2,
  "–î–û‚ôØ": 2,
  "–†–ï‚ô≠": 2,
  "–î–ûùÑ™": 3,
  "–†–ï": 3,
  "–ú–òùÑ´": 3,
  "–†–ï‚ôØ": 4,
  "–ú–ò‚ô≠": 4,
  "–§–êùÑ´": 4,
  "–†–ïùÑ™": 5,
  "–ú–ò": 5,
  "–§–ê‚ô≠": 5,
  "–ú–ò‚ôØ": 6,
  "–§–ê": 6,
  "–°–û–õ–¨ùÑ´": 6,
  "–ú–òùÑ™": 7,
  "–§–ê‚ôØ": 7,
  "–°–û–õ–¨‚ô≠": 7,
  "–§–êùÑ™": 8,
  "–°–û–õ–¨": 8,
  "–õ–ØùÑ´": 8,
  "–°–û–õ–¨‚ôØ": 9,
  "–õ–Ø‚ô≠": 9,
  "–°–û–õ–¨ùÑ™": 10,
  "–õ–Ø": 10,
  "–°–òùÑ´": 10,
  "–õ–Ø‚ôØ": 11,
  "–°–ò‚ô≠": 11,
  "–î–ûùÑ´": 11,
  "–õ–ØùÑ™": 12,
  "–°–ò": 12,
  "–î–û‚ô≠": 12
}

// FIND FIRST KEY NUMBER (randomNote)
const firstKey = twelveKeysObj[randomNote];
console.log("first key number: ", firstKey);

// FIND SECOND KEY NUMBER  
let secondKey = 0;

// Calculate second key number (if direction is "–≤–≤–µ—Ä—Ö") adding currentNumberOfSemitones to firstKey
function findTopKey(firstKey, currentNumberOfSemitones) {
  let topKey = firstKey + currentNumberOfSemitones;
  if (topKey > 12) {
    topKey -= 12;
  }
  console.log("second key number: ", topKey);
  secondKey = topKey;
}

// Calculate second key number (if direction is "–≤–Ω–∏–∑") substracting currentNumberOfSemitones from firstKey
function findBottomKey(firstKey, currentNumberOfSemitones) {
  let bottomKey = firstKey - currentNumberOfSemitones;
  if (bottomKey < 1) {
    bottomKey += 12;
  }
  console.log("second key number: ", bottomKey);
  secondKey = bottomKey;
}

// use the correct function depending on the direction to find second key
rootIsDefined ? findTopKey(firstKey, currentNumberOfSemitones) : findBottomKey(firstKey, currentNumberOfSemitones);

// FIND EXACT NOTE IN twelveKeysArr  
const twelveKeysArr = [
  ["–°–ò‚ôØ", "–î–û", "–†–ïùÑ´"],
  ["–°–òùÑ™", "–î–û‚ôØ", "–†–ï‚ô≠"],
  ["–î–ûùÑ™", "–†–ï", "–ú–òùÑ´"],
  ["–†–ï‚ôØ", "–ú–ò‚ô≠", "–§–êùÑ´"],
  ["–†–ïùÑ™", "–ú–ò", "–§–ê‚ô≠"],
  ["–ú–ò‚ôØ", "–§–ê", "–°–û–õ–¨ùÑ´"],
  ["–ú–òùÑ™", "–§–ê‚ôØ", "–°–û–õ–¨‚ô≠"],
  ["–§–êùÑ™", "–°–û–õ–¨", "–õ–ØùÑ´"],
  ["–°–û–õ–¨‚ôØ", "–õ–Ø‚ô≠"],
  ["–°–û–õ–¨ùÑ™", "–õ–Ø", "–°–òùÑ´"],
  ["–õ–Ø‚ôØ", "–°–ò‚ô≠", "–î–ûùÑ´"],
  ["–õ–ØùÑ™", "–°–ò", "–î–û‚ô≠"]
];

let finalSearchArr = twelveKeysArr[secondKey - 1];
console.log("final search array:", finalSearchArr);

// find secondNoteName in this finalSearchArr
let finalNote = "";

// take first 2 letters of the note to compare with notes in finalSearchArr
const firstTwoLettersInSecondNoteName = secondNoteName.split("", 2).join("");
console.log("first 2 letters in second note name:", firstTwoLettersInSecondNoteName);

for (let i = 0; i < finalSearchArr.length; i++) {
  const firstTwoLetters = finalSearchArr[i].split("", 2).join("");

  if (firstTwoLetters === firstTwoLettersInSecondNoteName) {
    finalNote = finalSearchArr[i];
  }
}
console.log("FINAL NOTE:", finalNote);

// CHECK ANSWER BUTTON
const checkAnswerButton = document.querySelector("#check-answer-btn");
const result = document.querySelector("#result");
const checkAnswerSound = new Audio("sounds/check-answer-sound.mp3");
checkAnswerButton.addEventListener("click", () => {
  if (workSpace.innerHTML === "?") {
    blinkNotesAndAccidentals();
    selectedNote = "?";
  } else if (selectedNote === finalNote) {
    result.innerHTML = "–ü–†–ê–í–ò–õ–¨–ù–û!";
    console.log("\n// CHECK ANSWER\n\n");
    console.log("Selected note:", selectedNote);
    console.log("Final note:", finalNote);
    console.log("Result: Correct!");
    checkAnswerSound.play(); 
  } else if (selectedNote !== finalNote) {
    result.innerHTML = "–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û";
    console.log("\n// CHECK ANSWER\n\n");
    console.log("Selected note:", selectedNote);
    console.log("Final note:", finalNote);
    console.log("Result: Incorrect!");
    checkAnswerSound.play();
  }
});

// NEXT TASK BUTTON
const nextTaskButton = document.querySelector("#next-task-btn");
nextTaskButton.addEventListener("click", () => {
  if (workSpace.innerHTML === "?" || result.innerHTML === "") {
    blinkNotesAndAccidentals();
  } else {
    window.location.reload();
  }
});